#!/usr/bin/env bash
# shellcheck disable=SC1091,SC2155

###############################################################################
export SYSTEM_TYPE=$(python -u -c 'import platform;print(platform.system())')


function __df_export_remove() {
    if [ $# -eq 2 ]; then
        local key=$1
        local old=$2
        local old_real=$(realpath $old)

        local env_val
        env_val=$(eval "echo \$$key:")  # let all part in $env_val is endding by ":"

        local env_val_without_old=$(echo $env_val|sed s#$old:##g)

        if [ "$old" != "$old_real" ]; then
            # remove realpath of $old
            env_val_without_old=$(echo $env_val_without_old|sed s#$old_real:##g)
        fi
        echo ${env_val_without_old::-1}
    fi
}

function __df_change_go_version() {
    if [ $# -ne 1 ]; then
        echo 'Usage: __df_change_go_version <version>' >&2
        return 0
    fi

    if [ -z "$GO_ALL_VERSION_BASE" ]; then
        GO_ALL_VERSION_BASE=/data
    fi
    local go_version="$1"
    local go_root="$GO_ALL_VERSION_BASE/go-$go_version"
    local go_path="$GO_ALL_VERSION_BASE/gopath-$go_version"

    if [ ! -d $go_root ]; then
        echo "Directory <$go_root> is not exist!" >&2
        return 0
    fi

    local old_go_which=$(which go 2>/dev/null)
    local old_go_in_path=${old_go_which%*/go}
    local old_GOBIN=${GOBIN}

    if [ ! -d "$go_path" ]; then
        mkdir "$go_path"
    fi

    export GOROOT="$go_root"
    export GOBIN="$GOROOT/bin"
    export GOPATH="$go_path"

    local PATH_cleaned=$(echo $PATH)
    if [ -n "$old_go_in_path" ]; then
        PATH_cleaned=$(__df_export_remove PATH_cleaned "$old_go_in_path")
    fi
    if [ -n "$old_GOBIN" ]; then
        PATH_cleaned=$(__df_export_remove PATH_cleaned "$old_GOBIN")
    fi

    export PATH=$GOBIN:$PATH_cleaned

    echo "$(go version)" >&2
}

# check whether the alias exists, return 1 if it already exists.
function __df_check_alias() {
    #echo '$# = ' $#
    if [ $# -eq 1 ]; then
        local alias_name=$1
        alias $alias_name 2<&- 1<&-
        if [ $? -eq 0 ]; then
            return 1
        fi
    fi
    return 0
}

# see environment variable split with ':' ( Or ';' on windows )
function __df_see_env() {
    if [ $# -eq 1 ]; then
        local env_var_name=$1
        local env_val=$(eval "echo \$$env_var_name")
        echo "$env_val" | awk -F':' '{ for (i = 1; i <= NF; ++i) printf("%s\n", $i) } '
    else
        echo 'Usage: c.env <env_var_name>'>&2
        echo '  e.g. c.env PATH'>&2
        __df_see_env PATH
    fi
}


alias c.env='__df_see_env'

# add environment variable without duplicate
function __df_export_insert() {
    if [ $# -eq 2 ]; then
        local key=$1
        local member=$2

        #echo `date +'%H:%M:%S.%N'` "__df_export_insert $1 ---- 1">&2  # for test

        local env_val
        env_val=$(eval "echo \$$key")

        local is_contain=$(echo :$env_val: | grep -c ":$member:")
        
        if [ $is_contain -eq 0 ]; then
            local export_cmd=''
            if [ -z "$env_val" ]; then
                export_cmd=`printf 'export %s="%s"'  $key "$member" `;
            else
                export_cmd=`printf 'export %s="$%s:%s"' $key "$key"  "$member" `;
            fi
            
            # echo $export_cmd >&2  # for test
            eval "$export_cmd";
        fi
    else
        echo 'Usage: __df_export_insert <env_var_name> <member>'>&2
    fi
}

__df_export_insert PATH "$DIFOSS_ENV_BASE/my_cmd"

if [ -z `command -v realpath` ]; then
    realpath () {
        f=$@;
        if [ -d "$f" ] ; then
            base="";
            dir="$f";
        else
            base="/$(basename "$f")";
            dir=$(dirname "$f");
        fi
        dir=$(cd "$dir" && /bin/pwd);
        echo "$dir$base"
    }
fi

# Change organization
function __df_change_org() {
    local org_name="$1"
    local org_root="$2"
    local main_lang="$3"
    local git_name="$4"
    local git_email="$5"
    if [ "$ORG_NAME" != "$org_name" ]; then
        echo "Change org into $org_name"
        export ORG_NAME="$1"
        export ORG_ROOT="$2"
        alias f=f.$3
        alias git.user="git config --local user.name '$4' && git config --local user.email '$5'"
    fi
    if [[ ${PWD} != $org_root* ]]; then
        cd "$org_root"
    fi
}

alias src='if [[ -n $ORG_ROOT-a  && -d "$ORG_ROOT/src_" ]];then cd $ORG_ROOT/src_; fi'
alias doc='if [[ -n $ORG_ROOT-a  && -d "$ORG_ROOT/doc_" ]];then cd $ORG_ROOT/doc_; fi'

function __df_mac_addr_2_ip() {
	if [ $# -ne 1 ]; then
		echo 'Usage: __df_mac_addr_2_ip <mac_address>' >&2
		return 0
	fi
	
	local mac_address=$1
	ip -f inet address show  | grep -A 1 -E "[[:digit:]]+\: $mac_address:" | tail -1 | awk -F"[ //]+" '{print $3}'
}

if [ "$SYSTEM_TYPE" == "Windows" ] ; then

    # Config Cygwin Here ------------------------------------
    export CYGPATH=cygpath.exe

    # alias p='powershell -command "ps | head -3 ; ps |grep $*" ' # $* $@
    alias p='ps -ef | grep'
    # netstat
    alias ns='netstat -ano | head -3 >&2; netstat -ano | grep'

    # quick open explorer in $1 directory
    alias e='_e() { if [ $# -ne 1 ]; then explorer .; else explorer `cygpath -d "$*"`; fi }; _e'

elif [ "$SYSTEM_TYPE" == "Linux" ] ; then

    export CYGPATH=echo
    export HOSTNAME=`cat /etc/hostname`
    export IP_ETH0=`__df_mac_addr_2_ip eth0`
    export ADDR_1st=`cat /proc/net/dev | awk '{i++; if(i>2){print $1}}'|grep -v lo| awk -F ':' '{print $1}'| head -1`
    export IP_1st=`__df_mac_addr_2_ip "$ADDR_1st"`

    export PS1='\e[36;2m<\t>\e[0m[\e[33;2m\u@\e[32;2m$IP_1st  \033[4m$HOSTNAME\e[0m] \e[35;2m\w\e[0m\e[36m$(fast_git_ps1)\e[0m\n$ '
    PROMPT_COMMAND='export PS1="`echo $PS1` "'

    alias p='ps -eo "%U %p %P %x %c %a"|head -1 >&2; ps -eo "%U %p %P %x %c %a"|egrep -vE "[[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2} grep"|grep'
    # netstat
    alias ns='netstat -anp | head -2 >&2; netstat -anp | grep'
    alias e='nautilus .'
    alias nc.check='nc -v -w 1'
else
    echo Unknown System Type !
fi


if [ "$TERM" == $"cygwin" ]; then  ##### cygwin, but not the original terminal
    export PS1="\e[36;2m<\t>\e[0m [\e[33;2m\u@\e[32;2m\h\e[0m] \e[35;2m\w\e[0m\[\033[36m\]`__git_ps1`\e[0m\n$ "
fi

###############################################################################

# User specific aliases and functions

# color flag effect `grep`, `ls` and so on...

if echo hello|grep --color=auto l >/dev/null 2>&1; then
    export GREP_COLOR="mt=10;33"
else
    export GREP_COLOR="10;33"
fi

export COLOR_FLAG="auto"

function __df_set_grep_color() {
    case "$#" in
        1)
            export COLOR_FLAG="$1"
        ;;
        *)
            export COLOR_FLAG="auto"
        ;;
    esac
}

alias grep.color.auto='__df_set_grep_color auto'
alias grep.color.yes='__df_set_grep_color yes'
alias grep.color.no='__df_set_grep_color no'

# add default parameters to some command
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias vi='vim'
alias ls="ls --show-control-chars --color=auto -A"
alias l='ls --show-control-chars --color=auto -Ah'
alias ll='ls --show-control-chars --color=auto -lAh'
alias lll='ls --show-control-chars --color=auto -lA'

lsdir() {
    local dir='.'
    if [ $# != 0 ]; then
        dir=$@
    fi
    find $dir -maxdepth 1 -type d | awk -F './' '{if($2!="")print $2}'
}

# short for 'Grep Include'
alias check='valgrind --tool=memcheck --track-fds=yes --leak-check=full --show-leak-kinds=definite'

###############################################################################
# about Grep & Find

## see config file
alias c.cfg='grep -P "^\s*[^#]+"'
alias c.cfg.numbering='grep -nP "^\s*[^#]+"'

# Grep
alias g='grep -nrI --color=$COLOR_FLAG'
alias grep='grep --color=$COLOR_FLAG --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
alias f.include="grep -naE '#\s*include'"

## find
alias f.java='grep -rIaHn --include="*.java" --color=$COLOR_FLAG'

### c++
alias f.c++='find . -type f -print0 | grep --color=no -zaiE ".*\.(cpp|hpp|c|h|hh|cxx|cc)$"|xargs -0 grep -aHn --color=$COLOR_FLAG'
# find callback
alias f.cb='find_callback(){ str="[>\.]+\s*"$@"\s*\("; find . -type f -print0 | grep --color=no -zaiE ".*\.(cpp|hpp|c|h|hh|cxx|cc)$"|xargs -0 grep -aHn --color=$COLOR_FLAG $str; }; find_callback'
# find call
alias f.call='find_call(){ str="[^a-zA-Z_]+"$@"\s*\("; find . -type f -print0 | grep --color=no -zaE ".*\.(cpp|hpp|c|h|hh|cxx|cc)$"|xargs -0 grep -aHn --color=$COLOR_FLAG $str; }; find_call'

#### find in implementation files of C/C++ ( file suffix: cpp,c,cxx,cc,C )
alias f.cpp='find . -type f -print0 | grep --color=no -zaiE ".*\.(cpp|c|cxx|cc)$" | xargs -0 grep -aHn --color=$COLOR_FLAG'
#### find in header of header files of C/C++ ( file suffix: h,hpp,hxx )
alias f.h='find . -type f -print0 | grep --color=no -zaiE ".*\.(hpp|h|hh|hxx)$" | xargs -0 grep -aHn --color=$COLOR_FLAG'
#### find in makefiles ( file name: M/makefile, *.mk, *.mak )
alias f.mk="find . -type f -print0 | grep --color=no -zaiE '(\.mak$)|(\.c?make$)|(\.mk$)|(/.*makefile[^//]*$)|(/cmakelists.txt$)|(BUILD$)|(WORKSPACE$)|(\.bzl$)|(\.gradle$)|(go.mod$)' | xargs -0 grep -aHn --color=\$COLOR_FLAG"
#### find in Cmakelists.txt
alias f.cmake="find . -type f -print0 | grep --color=no -zaiE '(/cmakelists.txt$)' | xargs -0 grep -aHn --color=\$COLOR_FLAG"
alias cmake.clean='find . \( -type d -name "CMakeFiles" \) -o \( -type f -name "CMakeCache.txt" \) | xargs -I {} rm -rf {}'


### C#
alias f.cs='find . -type f -print0 | grep --color=no -zaiE ".*\.(cs)$" | xargs -0 grep -aHn --color=$COLOR_FLAG'

#---------------------------
alias f.syslog="find /var/log -type f -name 'syslog' | xargs grep -aH --color=\$COLOR_FLAG"
#alias cl.syslog="cp /var/log/syslog /var/log/syslog-`date +%Y-%m-%d`.bak; cat /dev/null > /var/log/syslog"
alias f.log='find . -type f -name "*.log" -print0 | xargs -0 grep -aHn --color=$COLOR_FLAG'
alias f.ini='find . -type f -print0 | grep --color=no -zaiE ".*\.(ini|cfg|conf|xml|json|yaml)$" | xargs -0 grep -aHn --color=$COLOR_FLAG'

alias f.php='find . -type f -name "*.php" -print0 | xargs -0 grep -aHn --color=$COLOR_FLAG'
alias f.sql='find . -type f -name "*.sql" -print0 | xargs -0 grep -aHn --color=$COLOR_FLAG'
alias f.md='find . -type f -print0 | grep --color=no -zaiE ".*\.(md|rst)$"|xargs -0 grep -aHn --color=$COLOR_FLAG'
alias f.pb='find . -type f -print0 | grep --color=no -zaiE "(\.proto$)" | xargs -0 grep -aHn --color=$COLOR_FLAG'

alias f.js='find . -type f -print0 | grep --color=no -zaiE ".*\.(js|ts)$" | xargs -0 grep -aHn --color=$COLOR_FLAG'

alias f.go='find . -type f -print0 | grep --color=no -zaiE ".*\.(go)$" | xargs -0 grep -aHn --color=$COLOR_FLAG'
alias f.gosrc='find . -path "./vendor/*" -prune -o -name "*.go" -type f -print0 | xargs -0 grep -aHn --color=$COLOR_FLAG'
alias f.lua='find . -type f -print0 | grep --color=no -zaiE ".*\.(lua)$" | xargs -0 grep -aHn --color=$COLOR_FLAG'
alias f.thrift='find . -type f -name "*.thrift" -print0 | xargs -0 grep -aHn --color=$COLOR_FLAG'

alias f.bazel='find -type f -name "BUILD*" -print0 | xargs -0 grep -aHn --color=$COLOR_FLAG'
alias bn='find -type f -name BUILD -print0 | xargs -0 grep -aHn --color=$COLOR_FLAG name| grep'

# Set default `f` for MOST quickly find ( Unremark & change the following as your wish )
# alias f 2<&- 1<&-
# if [ $? -eq 1 ]; then
#     alias f=f.c++
# fi

#---------------------------
## <need other files>
# read symbol in *.*o, but just 1 depth. (transfer 'low-level name' into 'C++ readable name' by <find_symbol_in_so.pl>)
alias f.symbol='perl $DIFOSS_ENV_BASE/script/find_symbol_in_so.pl'
alias f.so='find . -type f -print0 | grep --color=no -zaiE ".*\.(so|o|lo|a|ar)$" |xargs -0 nm -CA 2>/dev/null | grep -a --color=$COLOR_FLAG'
# Provider: https://github.com/zeroleo12345

#--------------------------
# find py
alias pyf='find -type f -name "*.py" -print0 |xargs -0 grep -aHn --color=$COLOR_FLAG'
alias f.py='pyf'
# find function defination in py
alias pyfn='find -type f -name "*.py" -print0 |xargs -0 grep -anE "^\s*def\s+" |grep -0 --color=$COLOR_FLAG'
# find function calling in py
alias pyfc='find -type f -name "*.py" -print0 |xargs -0 grep -anvE "^\s*def\s+" |grep -0 --color=$COLOR_FLAG'
alias pyc='find -type f -name "*.py" -print0 |xargs -0 grep -anE "^\s*class\s+" |grep -0 --color=$COLOR_FLAG'

alias pydir='python $DIFOSS_ENV_BASE/script/py.dir.py'
alias pyhelp='python $DIFOSS_ENV_BASE/script/py.help.py'
alias pyv='python -c "import sys; print(sys.version)"'

alias pd=pydir
alias ph=pyhelp

alias py3dir='python3 $DIFOSS_ENV_BASE/script/py.dir.py'
alias py3help='python3 $DIFOSS_ENV_BASE/script/py.help.py'
alias py3v='python3 -c "import sys; print(sys.version)"'

alias pd3=py3dir
alias ph3=py3help

function __df_py_reinstall() {
    local module="$(basename `pwd`)"
    if [[ "$#" -ge 1 ]]; then
        module="$1"
    fi
    if [[ -z ""$module"" ]]; then
      echo moudle name MUST NOT empty! >&2
      return 1
    fi

    echo ======== re-install pymodule: $module ========
    pip uninstall -y "$module"
    local python_home=$(python -c "import pexpect; from os.path import realpath, dirname, join; print(realpath(join(dirname(pexpect.__file__), '..')))")
    local module_egg_files=${module//-/_}
    rm -rf "$python_home/$module_egg_files-*.egg"
    rm -rf difoss_pyutil.egg-info/ build/ dist/ __pycache__/
    python setup.py install
}

alias py.reinstall='__df_py_reinstall'

# start pydoc on http://localhost:1234
alias pydoc='nohup python -m pydoc -d -p 1234 2>&1 1>/dev/null &'
###############################################################################
# about Complie
alias m="find -maxdepth 1 -type f | grep --color=no -iE '(.*\.mak$)|(.*\.mk$)|(makefile)$' |awk -F / '{print $2}'| xargs -I {} make -f $1 {}"
alias mc='m clean'
alias mi='m install'
alias c='cmake .'

# find rfc*.txt
alias f.rfc='find -type f -name "rfc*.txt" -print0 |xargs -0 grep -an --color=$COLOR_FLAG'

###############################################################################
# about Web Crawler: HTML parse and so on
## grep HTML string by Single quotes
alias html.split.single="awk -F \"[']\" '{i=1;while(i<NF) {printf(\"%s\n\", \$i);i++}}'"
## grep HTML string by Double quotes
alias html.split.double="awk -F'\"' '{i=1;while(i<NF) {printf(\"%s\n\", \$i);i++}}'"
## grep HTML string by quotes (use '\047' install of the comma)
alias html.split="awk -F'[\"\047]' '{i=1;while(i<NF) {printf(\"%s\n\", \$i);i++}}'"
## grep HTML string to get FrontEnd RESource
alias html.fe.res='wget -c -t 3 -r -p -k -E -A=zip,jpg,jpeg,png,gif,html,css'


###############################################################################
# Git
alias gs="git status"
alias gb='git branch -vva'
alias gco='git checkout'
alias gco.back='git checkout @{-1}'
alias g\-='git checkout @{-1}'
alias gcs='echo "`git symbolic-ref -q --short HEAD`" > ~/.git-checkout-save'
alias gcb='git checkout "`cat ~/.git-checkout-save`"'

alias gd='git diff'
alias gds='git diff -w -U0 --word-diff-regex=[^[:space:]]'
alias gcp='git cherry-pick'
alias gcp.date='__df_git_cherry_pick_with_old_date'

## git log in one line
alias gl='git log --oneline'
alias gl.e='gl --color | emojify'
alias gll='git log --graph --date=iso --pretty=format:"%Cred%h%Creset - %Cgreen(%cd)%Creset %C(yellow)%d%Creset %C(yellow reverse)%cn%Creset %s" --abbrev-commit $@'
alias gll.e="gll --color | emojify"

alias git.unset-credential='git config --system --unset credential.help'
alias git.sub-update='git submodule update --recursive --init --remote'
alias git.sub-pull='git submodule foreach --recursive "git pull"'
alias git.sub='git submodule'
alias git.new-branch='__df_git_new_branch'
alias git.del-branch='__df_git_del_branch'
alias git.sub-del='__df_git_submodule_delete'

function __df_git_submodule_delete() {
    if [[ "$#" -ne 1 ]]; then
        echo 'Usage: __df_git_submodule_delete <submoudle-path>' >&2
        return 1
    fi
    git submodule deinit "$1"
    git rm --cached "$1"
}

function __df_git_new_branch() {
    local cur_branch=$(git name-rev --name-only HEAD)
    local base_branch=$cur_branch
    local tag_branch
    case "$#" in
        1)
            tag_branch="$1"
        ;;

        2)
            base_branch="$1"
            tag_branch="$2"

            git checkout "$base_branch"
        ;;

        *)
            echo 'Usage: __df_git_new_branch [base_branch_name] <tag_branch_name>' >&2
            return 1
        ;;
    esac

    git checkout -b "$tag_branch"
    git push --set-upstream origin "$tag_branch"
    git branch -vv
}

function __df_git_del_branch() {
    case "$#" in
        1)
            local branch="$1"
        ;;
        *)
            echo 'Uasge: __df_git_del_branch <branch_name> >&2'
            return 1
        ;;
    esac
    git checkout master
    git branch -d $branch
    git push origin :$branch
}

function __df_ext_params() {
    local fronts=()
    local chr_picks=()
    
    for arg in "$@"
    do
        echo "arg[$i]: $arg"
        echo len of : ${#chr_picks[*]}
        if [[ "$arg" =~ ^-.* ]] || [[ ${#chr_picks[*]} -ne 0 ]]; then
            chr_picks[${#chr_picks[*]}]="$arg"
        else
            fronts[${#fronts[*]}]="$arg"
        fi
    done
    # <debug>
    #echo '$fronts   (len='"${#fronts[*]}"'):' ${fronts[@]}
    #echo '$chr_picks(len='"${#chr_picks[*]}"'):' ${chr_picks[@]}
}

function __df_git_cherry_pick_with_old_date() {
    local fronts=()
    local chr_picks=()
    for arg in "$@"
    do
        if [[ "$arg" =~ ^-.* ]] || [[ ${#chr_picks[*]} -ne 0 ]]; then
            chr_picks[${#chr_picks[*]}]="$arg"
        else
            fronts[${#fronts[*]}]="$arg"
        fi
    done
    
    local len_fronts=${#fronts[*]}
    if [[  $len_fronts -eq 0 ]]; then
        echo 'Usage: git_cherry_pick_to_keep_time <commit_id> [git_author_date] [commiter_date] [git-cherry-pick OPTIONS...]' >&2
        return 1
    fi
    
    local commit_id=${fronts[0]}
    local git_author_date=`git log --date=iso --abbrev-commit --pretty=format:'%cd' $commit_id | head -1`
    local commiter_date="$git_author_date"

    case "$len_fronts" in
        1);;
        2)
            git_author_date="$2"
            commiter_date="$git_author_date"
        ;;

        3)
            git_author_date="$2"
            commiter_date="$3"
        ;;
    esac

    if [ -z commiter_date ]; then
        git cherry-pick "${chr_picks[@]]}" $commit_id
    else
        GIT_AUTHOR_DATE="$git_author_date" GIT_COMMITTER_DATE="$commiter_date" git cherry-pick "${chr_picks[@]]}" $commit_id
    fi
}

function fast_git_ps1 () {
    printf -- "$(git branch 2>/dev/null | grep -e '\* ' | sed 's/^..\(.*\)/ {\1} /')"
}

###############################################################################
# quick to edit bash environment and make it work after you save the config file.
alias b.reload='source $HOME/.bashrc'
alias b.rc='vim $HOME/.bashrc && source $HOME/.bashrc'
alias b.alias='vim $DIFOSS_ENV_BASE/my_alias && source $DIFOSS_ENV_BASE/my_alias'

###############################################################################
# about Directory
alias ..="cd .."
alias cd..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias -- -='cd -'
## cd save : save where i am
alias cds='echo "`pwd`" > ~/.cdsave'
## cd back
alias cdb='cd "`cat ~/.cdsave`"'


# entry last logout directory when login
#if [ -f ~/.cd-last-logout ];then
#    cd "`cat ~/.cd-last-logout`"
#fi

# exit and save lastest directory when logout
alias exit='echo $PWD > ~/.cd-last-logout; exit'

###############################################################################
# Functions

# make a dir and cd into it
mkcd(){
    mkdir -pv "$@" && cd "$@"
}

dirsize() {
    if [ "$#" -eq 0 ]; then
        du -h --max-depth=1 .
        return 0
    else
        for(( i=1;$i<=$#;i=$i+1 )) do
            du -h --max-depth=1 ${!i}
        done
    fi
}


# quick to send file ( use scp inner )
function sendto() {

    case "$#" in
        2)
            local machine_name=$1;
            local file=$2;
            local rpath="`realpath $file`"

            local user=`whoami`
            local cmd

            if [ -d $rpath ]; then
               cmd="scp -r \"$file\" $user@$machine_name:$rpath"
            else
               cmd="scp \"$file\" $user@$machine_name:$rpath"
            fi

            echo $cmd
            echo $cmd | sh
            return 1
        ;;
        *)
            echo "Usage: sendto <ip/host> <file>" >&2
        ;;
    esac

    return 0
}

# let aliases available when using sudo
alias sudo='sudo '

# manual in Chinese
alias cman='man -M /usr/local/share/man/zh_CN'
